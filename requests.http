### requests.http
### TEST GraphQL endpoint with Input Objects (Fixed for Tests)

### Basic Hello World Test
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "{ hello }"
}

###

### Create Customer with Input Object
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createCustomer(input: { name: \"Alice\", email: \"alice@example.com\", phone: \"+1234567890\" }) { customer { id name email phone } message success } }"
}

###

### Create Customer - Direct Variables (Alternative)
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation CreateCustomer($input: CustomerInput!) { createCustomer(input: $input) { customer { id name email phone } message success } }",
  "variables": {
    "input": {
      "name": "John Doe",
      "email": "johndoe@example.com",
      "phone": "+1234567890"
    }
  }
}

###

### Bulk Create Customers with Input Array
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { bulkCreateCustomers(input: [{ name: \"Bob\", email: \"bob@example.com\", phone: \"123-456-7890\" }, { name: \"Carol\", email: \"carol@example.com\" }]) { customers { id name email } errors successCount errorCount } }"
}

###

### Bulk Create Customers with Variables
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation BulkCreateCustomers($input: [CustomerInput!]!) { bulkCreateCustomers(input: $input) { customers { id name email } errors successCount errorCount } }",
  "variables": {
    "input": [
      {
        "name": "Bob Wilson",
        "email": "bob@example.com",
        "phone": "123-456-7890"
      },
      {
        "name": "Carol Smith", 
        "email": "carol@example.com"
      }
    ]
  }
}

###

### Create Product with Input Object
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createProduct(input: { name: \"Laptop\", price: 999.99, stock: 10 }) { product { id name price stock } message success } }"
}

###

### Create Product with Variables
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation CreateProduct($input: ProductInput!) { createProduct(input: $input) { product { id name price stock } message success } }",
  "variables": {
    "input": {
      "name": "Wireless Mouse",
      "price": 25.99,
      "stock": 50
    }
  }
}

###

### Create Another Product for Order Testing
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createProduct(input: { name: \"Keyboard\", price: 75.00, stock: 25 }) { product { id name price stock } message success } }"
}

###

### Create Order with Input Object
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createOrder(input: { customerId: \"1\", productIds: [\"1\", \"2\"] }) { order { id customer { name } products { name price } totalAmount orderDate } message success } }"
}

###

### Create Order with Variables
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation CreateOrder($input: OrderInput!) { createOrder(input: $input) { order { id customer { name } products { name price } totalAmount orderDate } message success } }",
  "variables": {
    "input": {
      "customerId": "1",
      "productIds": ["1", "2", "3"]
    }
  }
}

###

### Test Error Handling - Duplicate Email
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createCustomer(input: { name: \"Alice Duplicate\", email: \"alice@example.com\", phone: \"+1987654321\" }) { customer { id name email phone } message success } }"
}

###

### Test Error Handling - Invalid Phone Format
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createCustomer(input: { name: \"Invalid Phone\", email: \"invalid@example.com\", phone: \"invalid-phone\" }) { customer { id name email phone } message success } }"
}

###

### Test Error Handling - Invalid Price
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createProduct(input: { name: \"Invalid Product\", price: -10.99, stock: 5 }) { product { id name price stock } message success } }"
}

###

### Test Error Handling - Non-existent Customer
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createOrder(input: { customerId: \"999\", productIds: [\"1\"] }) { order { id customer { name } products { name price } totalAmount orderDate } message success } }"
}

###

### Test Error Handling - Invalid Product ID
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "mutation { createOrder(input: { customerId: \"1\", productIds: [\"999\", \"888\"] }) { order { id customer { name } products { name price } totalAmount orderDate } message success } }"
}

###

### Query All Data
POST http://localhost:8000/graphql/
Content-Type: application/json

{
  "query": "query { allCustomers { id name email phone } allProducts { id name price stock } allOrders { id customer { name } products { name price } totalAmount orderDate } }"
}
